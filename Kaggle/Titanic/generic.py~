
# This code will compare different algorithms for the dataset
# To add a new algorithm use the preprocessed data and write a new method and call the method in the end.

import re	
import csv
import numpy
from sklearn.naive_bayes import GaussianNB

# Add time along with the log
def log(logname,string):
        print str(datetime.now()) + "\t" + logname + "\t" + string

##################################################
# METHODS FOR PREPROCESSING THE DATA
##################################################

# Convert the gender
def convertGender(gender):
	if gender == 'female':
		gender = 0
	if gender == 'male':
		gender = 1
	return gender

# Convert the embarked field
def convertEmbarked(embarked):
	if embarked == 'C':
		embarked = 0
	if embarked == 'Q':
		embarked = 1
	if embarked == 'S':
		embarked = 2
	else:
		embarked = '2'
	return embarked

# return title
def getTitle(name):
	for word in name.split():
		if word.endswith('.'):
			title=word
	break
	return title

# convert title to hash
# TODO need to improve
def getTitleHash(title,gender):
has = ord(title[0]) + len(title) + int(gender)
return has

# returns one if the passenger had a family
def getFamily(sibsp,parch):
	return int(sibsp) + int(parch)


# Pull out the dept from the ticket number
def getTicketCode(ticket):
    deptName = re.sub(r"$\d+\W+|\b\d+\b|\W+\d+$", "", ticket)
    if len(deptName) == 0:
        deptName = 'none'
    deptCode = ord(deptName[0]) + len(deptName)
    return deptCode

# Return the same fare if it is non-empty.
# Else return the average fro the given 'ticket class'
# The average fare is already calculated in a spreadsheet
def getFare(fare,ticketclass):
	if fare != '':
		return fare

	if ticketclass == 1:
		return '94'

	if ticketclass == 2:
		return '22'

	if ticketclass == '3':
		return '12'

##################################################
# METHODS FOR DIFFERENT ALGORITHMS
#
# Tips to add new algorithm:
# 1. Copy the following random forest code.
# 2. Change the place holders accordingly
##################################################

def naivebayes(trainfeatures,trainlabels,testfeatures):
nb = GaussianNB()
return runalgorithm(nb,trainfeatures,trainlabels,testfeatures)


# Generic code for running any algorithm called from above algorithms
def runalgorithm(algorithm,trainfeatures,trainlabels,testfeatures):
logname = runalgorithm.__name__
algorithmName = algorithm.__class__.__name__

log(logname,algorithmName + " Fitting train data")
        algorithm = algorithm.fit(trainfeatures,trainlabels)
log(logname,algorithmName + " DONE Fitting train data")

log(logname,algorithmName + " Scoring train data")
scores = cross_val_score(algorithm, trainfeatures, trainlabels)
score = scores.mean()
score = str(score)
log(logname,algorithmName + " Score : " + score)
log(logname,algorithmName + " DONE Scoring train data")

log(logname,algorithmName + " Predicting test data")
Output = algorithm.predict(testfeatures)	
log(logname,algorithmName + " DONE Predicting test data")
writeFile = algorithmName + ".csv"
log(logname,algorithmName + " Writing results to " + writeFile)
np.savetxt(writeFile,Output,delimiter=",algorithmName + " ,fmt="%s")
log(logname,algorithmName + " DONE Writing results to " + writeFile)
return score

##################################################
# MAIN METHOD
##################################################
if __name__ == '__main__':	

logname = "__main__"

log(logname,"Reading Train Data")

train_file = csv.reader(open('./Data/train.csv','rb'))
header = train.next()

######READING TRAIN DATA################
train_data=[]
for row in train_file:
train_data.append(row)

train_data = numpy.array(train_data)

log(logname,"DONE Reading Train Data")

log(logname,"Preprocessing Train Data")
# replace categorical attributes
for row in train_data:

row[4] = convertGender(row[4])
title = getTitle(row[3])
row[3] = getTitleHash(title,row[4])
row[6] = getFamily(row[6],row[7])
row[8] = getTicketCode(row[8])
row[9] = getFare(row[9],row[2])
row[11] = convertEmbarked(row[11])

trainfeatures = train_data[0::,[2,3,4,6,8,11]]
trainlabels = train_data[0::,1]
trainfeatures = trainfeatures.astype(np.float)
log(logname,"DONE Preprocessing Train Data")


######READING TEST DATA################
log(logname,"Reading Test Data")
test = csv.reader(open('test.csv','rb'))
header = test.next()

test_data=[]
for row in test:
test_data.append(row)
test_data = np.array(test_data)
log(logname,"DONE Reading Test Data")

# replace categorical attributes
log(logname,"Preprocessing Test Data")
for row in test_data:

row[3] = convertGender(row[3])
title = getTitle(row[2])
row[2] = getTitleHash(title,row[3])
row[5] = getFamily(row[5],row[6])
row[7] = getTicketCode(row[7])
row[8] = getFare(row[8],row[1])
row[10] = convertEmbarked(row[10])


testfeatures = test_data[0::,[1,2,3,5,7,10]]
testfeatures = testfeatures.astype(np.float)
log(logname,"DONE Preprocessing Test Data")

####################### TRAIN AND TEST ##########################

scores = {}

log(logname,"Calling Naive Bayes")
score = naivebayes(trainfeatures,trainlabels,testfeatures)
scores['Naive Bayes'] = score
log(logname,"DONE WITH Naive Bayes")


print "\nSCORES\n"
for k, v in scores.iteritems():
print k + "\t" + v
